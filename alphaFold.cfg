; training_dataset to be queried
[DB_NAME]
host = HOSTSERVER
host_local = localhost
username = USERNAME
dbname = DBNAME

[Q_afIDInsert]
database = DB_vmdata
query =
    INSERT INTO alpha.af_id(genome_id, protein_id)
    VALUES
        ('%%%GENOMEID%%%', '%%%PROTEINID%%%')
format = none
header = none

[Q_afIDInsertTest]
database = DB_vmdata
query =
    INSERT INTO alpha.af_id_test(genome_id, protein_id)
    VALUES
        ('%%%GENOMEID%%%', '%%%PROTEINID%%%')
format = none
header = none

[Q_afID_Index]
database = DB_vmdata
query =
    select id
    from alpha.af_id
    where genome_id = '%%%GENOMEID%%%'
    and protein_id = '%%%PROTEINID%%%'
format =
    {:7d}
header =
    id

[Q_afID_IndexTest]
database = DB_vmdata
query =
    select id
    from alpha.af_id_test
    where genome_id = '%%%GENOMEID%%%'
    and protein_id = '%%%PROTEINID%%%'
format =
    {:7d}
header =
    id

[Q_afHCoordInsert]
database = DB_vmdata
query =
    INSERT INTO alpha.protein_coord(af_id, atom_number, protein_atom, residue_type, chain, residue_sequence, x_coord, y_coord, z_coord, occupancy, b_factor, element)
    VALUES
        ('%%%AFID%%%', %%%ATOMNUM%%%, '%%%PROTEINATOM%%%', '%%%RESTYPE%%%', '%%%CHAIN%%%', %%%RESSEQ%%%, %%%XCOORD%%%, %%%YCOORD%%%, %%%ZCOORD%%%, %%%OCCUP%%%, %%%BFAC%%%, '%%%ELEMENT%%%')
format = none
header = none

[Q_queryCSPindex]
database = DB_vmdata
query =
    select id
    from alpha.cs_predictor
    where csp_name = '%%%CSP%%%'
format =
    {:7d}
header =
    id

[Q_insertCSPlist]
database = DB_vmdata
query =
    INSERT INTO alpha.cs_predictor(csp_name)
    VALUES
        ('%%%CSP%%%')
format = none
header = none

[Q_queryExpCond]
database = DB_vmdata
query =
    select id
    from alpha.experiment_conditions
    where ph = %%%PH%%%
    and temp = %%%TEMP%%%
format =
    {:7d}
header =
    id

[Q_insertExpCond]
database = DB_vmdata
query =
    INSERT INTO alpha.experiment_conditions(pH, temp)
    VALUES
        (%%%PH%%%, %%%TEMP%%%)
format = none
header = none

[Q_queryExpNull]
database = DB_vmdata
query =
    select id
    from alpha.experiment_conditions
    where ph is NULL
    and temp is NULL
format =
    {:7d}
header =
    id

[Q_expInsertNull]
database = DB_vmdata
query =
    INSERT INTO alpha.experiment_conditions(temp, ph)
    VALUES
        (NULL, NULL)

[Q_tempInsertCS]
database = DB_vmdata
query =
    INSERT INTO alpha.cs_prediction(af_id, csp_id, protein_atom, res_sequence, exp_id, chemical_shift, res_name)
    VALUES
        (%%%AFID%%%, %%%CSPID%%%, '%%%PROTEINATOM%%%', %%%RESN%%%, %%%EXPID%%%, %%%CS%%%, '%%%RESNAME%%%')
format = none
header = none

# TODO: Generalize max(VAR) fnc
[Q_maxAtomNum]
database = DB_vmdata
query =
    select max(atom_number)
    from alpha.protein_coord
    where af_id = '%%%AFID%%%'
format =
    {:7d}
header =
    atom_number

[Q_maxResNum]
database = DB_vmdata
query =
    select max(residue_sequence)
    from alpha.protein_coord
    where af_id = '%%%AFID%%%'
format =
    {:7d}
header =
    residue_sequence

[Q_countCS]
database = DB_vmdata
query =
    select count(*)
    from alpha.cs_prediction
    where af_id = '%%%AFID%%%'
    and csp_id = '%%%CSPID%%%'
format =
    {:7d}
header =
    countCS

[Q_select_pdbAtoms]
database = DB_vmdata
query =
    select atom_number, protein_atom, residue_type, chain, residue_sequence, x_coord, y_coord, z_coord, occupancy, b_factor, element
    from alpha.protein_coord
    where af_id = '%%%AFID%%%'
    and chain = '%%%CHAIN%%%'
format =
    {:8d} & {:4s} & {:4s} & {:4s} & {:4d} & {:16f} & {:16f} & {:16f} & {:8f} & {:8f} & {:2s}
header =
    atom_number & protein_atom & residue_type & chain & residue_sequence & x_coord & y_coord & z_coord & occupancy & b_factor & element

;[Q_testing]
;database = DB_vmdata
;query = INSERT INTO alpha.af_id_test(genome_id, protein_id) VALUES %%%TUPLES%%%
;    cur = postgreSQL.conn.cursor()
;    argument_string = ",".join("('%s', '%s')" % (x, y) for (x, y) in values)
;    cur.execute("INSERT INTO alpha.af_id_test(genome_id, protein_id) VALUES" + argument_string)
;    postgreSQL.conn.commit()

[Q_protInsert]
database = DB_vmdata
query =
    INSERT INTO alpha.protein_coord(af_id, atom_number, protein_atom, residue_type, chain, residue_sequence, x_coord, y_coord, z_coord, occupancy, b_factor, element)
    VALUES %%%TUPLES%%%
format = none
header = none

[Q_insertCSList]
database = DB_vmdata
query =
    INSERT INTO alpha.cs_prediction(af_id, csp_id, protein_atom, res_sequence, exp_id, chemical_shift, res_name)
    VALUES %%%TUPLES%%%
format = none
header = none

[Q_selectAll_afID]
database = DB_vmdata
query =
    select *
    from alpha.af_id
format =
    {:7d} & {:32s} & {:32s}
header =
    id & genome_id & protein_id

[Q_selectAll_cspID]
database = DB_vmdata
query =
    select *
    from alpha.cs_predictor
format =
    {:4d} & {:16s}
header =
    id & csp_name

[Q_selectResList]
database = DB_vmdata
query =
    select distinct (residue_sequence, residue_type) from alpha.protein_coord where af_id = '%%%AFID%%%'
format =
    {:7d} & {:3s}
header =
    resNum & resName

[Q_selectResList_columns]
database = DB_vmdata
query =
    select distinct residue_sequence, residue_type from alpha.protein_coord where af_id = %%%AFID%%%
format =
    {:7d} & {:3s}
header =
    resNum & resName

[Q_selectAll_cspPredictions]
database = DB_vmdata
query =
    select *
    from alpha.cs_prediction where
    af_id = '%%%AFID%%%'
    and csp_id = '%%%CSPID%%%'
    order by res_sequence
format =
    {:32d} & {:16d} & {:3d} & {:3d} & {:8s} & {:8d} & {:3s} & {:16f}
header =
    id & af_id & csp_id & exp_id & protein_atom & res_sequence & res_name & chemical_shift

[Q_selectUniqueAF_cspID]
database = DB_vmdata
query =
    select distinct csp_id from alpha.cs_prediction where af_id = '%%%AFID%%%'
format =
    {:7d}
header =
    csp_id

[Q_selectDistinctPredAtoms]
database = DB_vmdata
query =
    select distinct (csp_id, res_name, protein_atom) from alpha.cs_prediction
format =
    {:16s}
header =
    entry

[Q_insertStdAtom]
database = DB_vmdata
query =
    INSERT INTO alpha.atom_naming(csp_id, res_name, protein_atom, atom_std)
    VALUES
        (%%%CSPID%%%, '%%%RESNAME%%%', '%%%PROTEINATOM%%%', '%%%ATOMSTD%%%')
format = none
header = none

[Q_compareCSP]
database = DB_vmdata
query =
    select resF.res_sequence, resF.residue_type, resF.atom, resF.chemical_shift
        from
            ((select result.res_sequence, result.res_name, result.residue_type
                from
                    ((select distinct csp.res_sequence, csp.res_name from alpha.cs_prediction csp
                    where csp_id = %%%CSPID%%% and af_id = %%%AFID%%%) csp
                    left outer join
                    (select distinct prc.residue_sequence, prc.residue_type from alpha.protein_coord prc
                    where af_id = %%%AFID%%%) prc
                        on csp.res_sequence = prc.residue_sequence and csp.res_name <> prc.residue_type) result
                where result.residue_type is not null) res1
            inner join
            (select result.res_sequence as residue_seq, result.res_name as residue_name, case when atom_std is null then protein_atom else atom_std end as atom, result.chemical_shift
            from (select csp.res_sequence, csp.res_name, csp.protein_atom, an1.atom_std, csp.chemical_shift
            from alpha.cs_prediction csp
            full outer join alpha.atom_naming an1 on csp.res_name = an1.res_name and csp.protein_atom = an1.protein_atom
            where csp.csp_id = %%%CSPID%%% and csp.af_id = %%%AFID%%%) result) res2
                on res1.res_name = res2.residue_name and res1.res_sequence = res2.residue_seq) resF
    union
    select result.res_sequence, result.res_name, case when atom_std is null then protein_atom else atom_std end as atom, result.chemical_shift
    from (select csp.res_sequence, csp.res_name, csp.protein_atom, an1.atom_std, csp.chemical_shift
    from alpha.cs_prediction csp
    full outer join alpha.atom_naming an1 on csp.res_name = an1.res_name and csp.protein_atom = an1.protein_atom
    where csp.csp_id = %%%CSPID%%% and csp.af_id = %%%AFID%%% and csp.res_name <> 'ASX') result
    order by res_sequence
format = {:8d} & {:3s} & {:4s} & {:8f}
header = res_sequence & residue_type & atom & chemical_shift
;header = res_seq & res_name & atom & chem_shift

[Q_distinctAF_ASX]
database = DB_vmdata
query =
    select distinct af_id from alpha.cs_prediction where csp_id = 2 and res_name = 'ASX'
format = {:16d}
header = af_id

[Q_asxMapping]
database = DB_vmdata
query =
    select resF.res_sequence, resF.residue_type, resF.atom, resF.chemical_shift
        from
            ((select result.res_sequence, result.res_name, result.residue_type
                from
                    ((select distinct csp.res_sequence, csp.res_name from alpha.cs_prediction csp
                    where csp_id = 2 and af_id = %%%AFID%%%) csp
                    left outer join
                    (select distinct prc.residue_sequence, prc.residue_type from alpha.protein_coord prc
                    where af_id = %%%AFID%%%) prc
                        on csp.res_sequence = prc.residue_sequence and csp.res_name <> prc.residue_type) result
                where result.residue_type is not null) res1
            inner join
            (select result.res_sequence as residue_seq, result.res_name as residue_name, case when atom_std is null then protein_atom else atom_std end as atom, result.chemical_shift
            from (select csp.res_sequence, csp.res_name, csp.protein_atom, an1.atom_std, csp.chemical_shift
            from alpha.cs_prediction csp
            full outer join alpha.atom_naming an1 on csp.res_name = an1.res_name and csp.protein_atom = an1.protein_atom
            where csp.csp_id = 2 and csp.af_id = %%%AFID%%%) result) res2
                on res1.res_name = res2.residue_name and res1.res_sequence = res2.residue_seq) resF
format = {:8d} & {:3s} & {:4s} & {:8f}
header = res_sequence & residue_type & atom & chemical_shift

[Q_selectResList_new]
database = DB_vmdata
query =
    select distinct residue_sequence, residue_type from alpha.protein_coord where af_id = %%%AFID%%% order by residue_sequence
format =
    {:7d} & {:3s}
header =
    resNum & resName
